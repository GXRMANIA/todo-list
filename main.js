(()=>{"use strict";var e={d:(t,o)=>{for(var n in o)e.o(o,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:o[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function o(e){t(1,arguments);var o=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===o?new Date(e.getTime()):"number"==typeof e||"[object Number]"===o?new Date(e):("string"!=typeof e&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function n(e){t(1,arguments);var n=o(e);return n.setHours(0,0,0,0),n}function i(e,o){t(2,arguments);var i=n(e),c=n(o);return i.getTime()===c.getTime()}e.d({},{l:()=>l});const c=(()=>{const e=document.querySelector(".newTodoForm"),o=document.querySelector(".todos-container"),n=document.querySelector(".editTodoContainer"),c=document.querySelector("#content");function r(){e.childNodes.forEach((e=>{"text"===e.type&&(e.value="")})),e.classList.add("inactive"),l.closeTodoForm()}function d(){n.innerHTML=""}return{loadToday:function(e){o.innerHTML="",e.filter((e=>{console.log(function(e){return t(1,arguments),i(e,Date.now())}(e.dueDate))}))},loadProjectsPage:function(e){c.innerHTML="";const t=e.map((e=>e.project));[...new Set(t)].forEach((t=>{let o=e.filter((e=>{if(e.project===t)return e}));const n=document.createElement("div");n.classList.add("projectContainer");const i=document.createElement("div");i.textContent=t,n.appendChild(i),o.forEach((e=>{const t=document.createElement("div");t.textContent=e.title,t.classList.add("projectTodos"),n.appendChild(t)})),c.appendChild(n)}))},clearScreen:function(){r(),d(),o.innerHTML="",c.innerHTML=""},openNewTodoForm:function(){e.classList.remove("inactive"),n.innerHTML=""},closeNewTodoForm:r,loadHome:function(e){o.innerHTML="";let t=0;e.forEach((e=>{o.innerHTML+=`\n            <div class="todo" data-id="${t}">\n                <p>${e.title}</p>\n                <p>Due: ${e.dueDate}</p>\n                <input type="button" value="Edit" class="editTodoBtn">\n                <input type="button" value="Delete" class="deleteTodoBtn">\n            </div>\n            `,t++}))},openEditTodo:function(e,t){o.innerHTML="",r(),n.innerHTML=`\n            <div class="editTodo" data-id="${t}">\n                <input type="text" value="${e.title}" class="editTitleInput">\n                <input type="text" value="${e.description}" class="editDescriptionInput">\n                <input type="date" value="${e.dueDate}" class="editDueDateInput"> \n                <select name="priority" id="priority" class="editPriorityInput">\n                    <option ${"low"==e.priority?"selected":""} value="low">Low</option>\n                    <option ${"mid"==e.priority?"selected":""} value="mid">Mid</option>\n                    <option ${"high"==e.priority?"selected":""} value="high">High</option>\n                </select>\n                <input type="text" value="${e.project}" class="editProjectInput">\n                <input type="button" value="Save" class="saveEditBtn">\n                <input type="button" value="Cancel" class="cancelEditBtn">\n            </div>\n            `},closeEditTodo:d}})(),r=function(e){const t=e.target.classList[0];"addBookBtn"===t?l.addTodo():"closeTodoForm"===t&&UI.closeNewTodoForm()},d=function(e){const t=e.target.classList[0];let o=e.target.parentNode.dataset.id;"deleteTodoBtn"===t?l.deleteTodo(o):"editTodoBtn"===t&&l.editTodo(o)},a=function(e){let t=e.target.parentNode.dataset.id;const o=e.target.classList[0];if("cancelEditBtn"===o)l.cancelEditTodo();else if("saveEditBtn"===o){const e=document.querySelector(".editTitleInput").value,o=document.querySelector(".editDescriptionInput").value,n=document.querySelector(".editDueDateInput").value,i=document.querySelector(".editPriorityInput").value,c=document.querySelector(".editProjectInput").value;l.saveEditTodo(t,e,o,n,i,c)}};function u(e,t,o,n,i){this.title=e,this.description=t,this.dueDate=o,this.priority=n,this.project=i}u.prototype.updateTodo=function(e,t,o,n,i){this.title=e,this.description=t,this.dueDate=o,this.priority=n,this.project=i};const l=(()=>{let e=[];const t=document.querySelector(".newBookBtn"),o=document.querySelector(".newTodoForm"),n=document.querySelector(".todos-container"),i=document.querySelector(".editTodoContainer"),l=document.querySelector("#title"),s=document.querySelector("#description"),p=document.querySelector("#duedate"),m=document.querySelector("#priority"),T=document.querySelector("#project"),v=document.querySelector(".navProjects"),y=document.querySelector(".navHome"),f=document.querySelector(".navToday");return t.addEventListener("click",c.openNewTodoForm),o.addEventListener("click",r),n.addEventListener("click",d),i.addEventListener("click",a),v.addEventListener("click",(function(){c.clearScreen(),c.loadProjectsPage(e)})),y.addEventListener("click",(function(){c.clearScreen(),c.loadHome(e)})),f.addEventListener("click",(function(){c.clearScreen(),c.loadToday(e)})),function(){const t=new u("Titel1","Beschreibung 1",new Date(1995,11,17),"Wichtig","Project1"),o=new u("Titel2","Beschreibung 1",new Date(2022,7,4),"Wichtig1","Project2"),n=new u("Titel3eins","Beschreibung 1",new Date(1995,11,17),"Wichtig2","Project3"),i=new u("Titel4eins","Beschreibunsg 1",new Date(1995,11,17),"Wichtig2","Project1");e.push(t),e.push(o),e.push(n),e.push(i),c.loadHome(e)}(),{addTodo:function(){if(!l.value)return void alert("You have to fill in a title!");const t=new u(l.value,s.value,p.value,m.value,T.value);e.push(t),c.loadHome(e),c.closeNewTodoForm()},deleteTodo:function(t){e.splice(t,1),c.loadHome(e)},editTodo:function(t){c.openEditTodo(e[t],t)},cancelEditTodo:function(){c.closeEditTodo(),c.loadHome(e)},saveEditTodo:function(t,o,n,i,r,d){e[t].updateTodo(o,n,i,r,d),c.closeEditTodo(),c.loadHome(e)},closeTodoForm:function(){c.loadHome(e)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,