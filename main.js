(()=>{"use strict";var e={d:(t,o)=>{for(var n in o)e.o(o,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:o[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function o(e){t(1,arguments);var o=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===o?new Date(e.getTime()):"number"==typeof e||"[object Number]"===o?new Date(e):("string"!=typeof e&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function n(e){t(1,arguments);var n=o(e);return n.setHours(0,0,0,0),n}function i(e,o){t(2,arguments);var i=n(e),d=n(o);return i.getTime()===d.getTime()}function d(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}e.d({},{l:()=>T});var r={};function c(){return r}function a(e,n){var i,r,a,l,s,u,p,v;t(1,arguments);var m=c(),y=d(null!==(i=null!==(r=null!==(a=null!==(l=null==n?void 0:n.weekStartsOn)&&void 0!==l?l:null==n||null===(s=n.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:m.weekStartsOn)&&void 0!==r?r:null===(p=m.locale)||void 0===p||null===(v=p.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==i?i:0);if(!(y>=0&&y<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=o(e),T=f.getDay(),S=(T<y?7:0)+T-y;return f.setDate(f.getDate()-S),f.setHours(0,0,0,0),f}function l(e,o,n){t(2,arguments);var i=a(e,n),d=a(o,n);return i.getTime()===d.getTime()}const s=(()=>{const e=document.querySelector(".newTodoForm"),o=document.querySelector(".todos-container"),n=document.querySelector(".editTodoContainer"),d=document.querySelector("#content"),r=document.querySelector(".navProjects"),c=document.querySelector(".navHome"),a=document.querySelector(".navToday"),s=document.querySelector(".navWeek");function u(){e.childNodes.forEach((e=>{"text"===e.type&&(e.value="")})),e.classList.add("inactive")}function p(){n.innerHTML=""}function v(){u(),p(),o.innerHTML="",d.innerHTML=""}return{loadWeek:function(e){s.classList.add("selected"),a.classList.remove("selected"),c.classList.remove("selected"),r.classList.remove("selected"),v();let n=0,i=e.filter((e=>{if(function(e,o){return t(1,arguments),l(e,Date.now(),o)}(Date.parse(e.dueDate)))return e}));i.forEach((e=>{o.innerHTML+=`\n            <div class="todo" data-id="${n}">\n                <p>${e.title}</p>\n                <p>Due: ${e.dueDate}</p>\n                <div>\n                    <input type="button" value="Edit" class="editTodoBtn">\n                    <input type="button" value="Delete" class="deleteTodoBtn">\n                </div>\n            </div>\n            `,n++}))},loadToday:function(e){a.classList.add("selected"),c.classList.remove("selected"),s.classList.remove("selected"),r.classList.remove("selected"),v();let n=0,d=e.filter((e=>{if(function(e){return t(1,arguments),i(e,Date.now())}(Date.parse(e.dueDate)))return e}));d.forEach((e=>{o.innerHTML+=`\n            <div class="todo" data-id="${n}">\n                <p>${e.title}</p>\n                <p>Due: ${e.dueDate}</p>\n                <div>\n                    <input type="button" value="Edit" class="editTodoBtn">\n                    <input type="button" value="Delete" class="deleteTodoBtn">\n                </div>\n            </div>\n            `,n++}))},loadProjectsPage:function(e){r.classList.add("selected"),a.classList.remove("selected"),c.classList.remove("selected"),s.classList.remove("selected"),v();const t=e.map((e=>e.project));[...new Set(t)].forEach((t=>{let o=e.filter((e=>{if(e.project===t)return e}));const n=document.createElement("div");n.classList.add("projectContainer");const i=document.createElement("div");i.textContent=t,n.appendChild(i),o.forEach((e=>{const t=document.createElement("li");t.textContent=e.title,t.classList.add("projectTodos"),n.appendChild(t)})),d.appendChild(n)}))},clearScreen:v,openNewTodoForm:function(){e.classList.remove("inactive"),n.innerHTML="",o.innerHTML=""},closeNewTodoForm:u,loadHome:function(e){c.classList.add("selected"),a.classList.remove("selected"),s.classList.remove("selected"),r.classList.remove("selected"),v();let t=0;e.forEach((e=>{o.innerHTML+=`\n            <div class="todo" data-id="${t}">\n                <p>${e.title}</p>\n                <p>Due: ${e.dueDate}</p>\n                <div>\n                    <input type="button" value="Edit" class="editTodoBtn">\n                    <input type="button" value="Delete" class="deleteTodoBtn">\n                </div>\n            </div>\n            `,t++}))},openEditTodo:function(e,t){o.innerHTML="",u(),n.innerHTML=`\n            <div class="editTodo" data-id="${t}">\n                <input type="text" value="${e.title}" class="editTitleInput">\n                <input type="text" value="${e.description}" class="editDescriptionInput">\n                <input type="date" value="${e.dueDate}" class="editDueDateInput"> \n                <select name="priority" id="priority" class="editPriorityInput">\n                    <option ${"low"==e.priority?"selected":""} value="low">Low</option>\n                    <option ${"mid"==e.priority?"selected":""} value="mid">Mid</option>\n                    <option ${"high"==e.priority?"selected":""} value="high">High</option>\n                </select>\n                <input type="text" value="${e.project}" class="editProjectInput">\n                <input type="button" value="Save" class="saveEditBtn">\n                <input type="button" value="Cancel" class="cancelEditBtn">\n            </div>\n            `},closeEditTodo:p}})(),u=function(e){const t=e.target.classList[0];"addBookBtn"===t?T.addTodo():"closeTodoForm"===t&&s.closeNewTodoForm()},p=function(e){const t=e.target.classList[0];let o=e.target.parentNode.parentNode.dataset.id;"deleteTodoBtn"===t?T.deleteTodo(o):"editTodoBtn"===t&&T.editTodo(o)},v=function(e){let t=e.target.parentNode.dataset.id;const o=e.target.classList[0];if("cancelEditBtn"===o)T.cancelEditTodo();else if("saveEditBtn"===o){const e=document.querySelector(".editTitleInput").value,o=document.querySelector(".editDescriptionInput").value,n=document.querySelector(".editDueDateInput").value,i=document.querySelector(".editPriorityInput").value,d=document.querySelector(".editProjectInput").value;T.saveEditTodo(t,e,o,n,i,d)}},m=function(e){localStorage.setItem("todos",JSON.stringify(e))},y=function(){let e=[];return JSON.parse(localStorage.getItem("todos")).forEach((t=>{let o=new f(t.title,t.description,t.dueDate,t.priority,t.project);e.push(o)})),e};function f(e,t,o,n,i){this.title=e,this.description=t,this.dueDate=o,this.priority=n,this.project=i}f.prototype.updateTodo=function(e,t,o,n,i){this.title=e,this.description=t,this.dueDate=o,this.priority=n,this.project=i};const T=(()=>{let e=[];const t=document.querySelector(".newBookBtn"),o=document.querySelector(".newTodoForm"),n=document.querySelector(".todos-container"),i=document.querySelector(".editTodoContainer"),d=document.querySelector("#title"),r=document.querySelector("#description"),c=document.querySelector("#duedate"),a=document.querySelector("#priority"),l=document.querySelector("#project"),T=document.querySelector(".navProjects"),S=document.querySelector(".navHome"),L=document.querySelector(".navToday"),h=document.querySelector(".navWeek");return t.addEventListener("click",s.openNewTodoForm),o.addEventListener("click",u),n.addEventListener("click",p),i.addEventListener("click",v),T.addEventListener("click",(()=>{s.loadProjectsPage(e)})),S.addEventListener("click",(()=>{s.loadHome(e)})),L.addEventListener("click",(()=>{s.loadToday(e)})),h.addEventListener("click",(()=>{s.loadWeek(e)})),e=y(),s.loadHome(e),{addTodo:function(){if(!d.value)return void alert("You have to fill in a title!");const t=new f(d.value,r.value,c.value,a.value,l.value);e.push(t),m(e),s.loadHome(e),s.closeNewTodoForm()},deleteTodo:function(t){e.splice(t,1),s.loadHome(e),m(e)},editTodo:function(t){s.openEditTodo(e[t],t)},cancelEditTodo:function(){s.closeEditTodo(),s.loadHome(e)},saveEditTodo:function(t,o,n,i,d,r){e[t].updateTodo(o,n,i,d,r),s.closeEditTodo(),s.loadHome(e),m(e)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,