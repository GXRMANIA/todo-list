(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function n(e){t(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(e){t(1,arguments);var o=n(e);return o.setHours(0,0,0,0),o}function i(e,n){t(2,arguments);var i=o(e),r=o(n);return i.getTime()===r.getTime()}function r(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}e.d({},{l:()=>f});var d={};function c(){return d}function a(e,o){var i,d,a,l,u,s,p,v;t(1,arguments);var m=c(),f=r(null!==(i=null!==(d=null!==(a=null!==(l=null==o?void 0:o.weekStartsOn)&&void 0!==l?l:null==o||null===(u=o.locale)||void 0===u||null===(s=u.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==a?a:m.weekStartsOn)&&void 0!==d?d:null===(p=m.locale)||void 0===p||null===(v=p.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==i?i:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var T=n(e),y=T.getDay(),h=(y<f?7:0)+y-f;return T.setDate(T.getDate()-h),T.setHours(0,0,0,0),T}function l(e,n,o){t(2,arguments);var i=a(e,o),r=a(n,o);return i.getTime()===r.getTime()}const u=(()=>{const e=document.querySelector(".newTodoForm"),n=document.querySelector(".todos-container"),o=document.querySelector(".editTodoContainer"),r=document.querySelector("#content");function d(){e.childNodes.forEach((e=>{"text"===e.type&&(e.value="")})),e.classList.add("inactive"),f.closeTodoForm()}function c(){o.innerHTML=""}return{loadWeek:function(e){let o=0,i=e.filter((e=>{if(function(e,n){return t(1,arguments),l(e,Date.now(),n)}(Date.parse(e.dueDate)))return e}));i.forEach((e=>{n.innerHTML+=`\n            <div class="todo" data-id="${o}">\n                <p>${e.title}</p>\n                <p>Due: ${e.dueDate}</p>\n                <input type="button" value="Edit" class="editTodoBtn">\n                <input type="button" value="Delete" class="deleteTodoBtn">\n            </div>\n            `,o++}))},loadToday:function(e){let o=0,r=e.filter((e=>{if(function(e){return t(1,arguments),i(e,Date.now())}(Date.parse(e.dueDate)))return e}));r.forEach((e=>{n.innerHTML+=`\n            <div class="todo" data-id="${o}">\n                <p>${e.title}</p>\n                <p>Due: ${e.dueDate}</p>\n                <input type="button" value="Edit" class="editTodoBtn">\n                <input type="button" value="Delete" class="deleteTodoBtn">\n            </div>\n            `,o++}))},loadProjectsPage:function(e){r.innerHTML="";const t=e.map((e=>e.project));[...new Set(t)].forEach((t=>{let n=e.filter((e=>{if(e.project===t)return e}));const o=document.createElement("div");o.classList.add("projectContainer");const i=document.createElement("div");i.textContent=t,o.appendChild(i),n.forEach((e=>{const t=document.createElement("div");t.textContent=e.title,t.classList.add("projectTodos"),o.appendChild(t)})),r.appendChild(o)}))},clearScreen:function(){d(),c(),n.innerHTML="",r.innerHTML=""},openNewTodoForm:function(){e.classList.remove("inactive"),o.innerHTML=""},closeNewTodoForm:d,loadHome:function(e){n.innerHTML="";let t=0;e.forEach((e=>{n.innerHTML+=`\n            <div class="todo" data-id="${t}">\n                <p>${e.title}</p>\n                <p>Due: ${e.dueDate}</p>\n                <input type="button" value="Edit" class="editTodoBtn">\n                <input type="button" value="Delete" class="deleteTodoBtn">\n            </div>\n            `,t++}))},openEditTodo:function(e,t){n.innerHTML="",d(),o.innerHTML=`\n            <div class="editTodo" data-id="${t}">\n                <input type="text" value="${e.title}" class="editTitleInput">\n                <input type="text" value="${e.description}" class="editDescriptionInput">\n                <input type="date" value="${e.dueDate}" class="editDueDateInput"> \n                <select name="priority" id="priority" class="editPriorityInput">\n                    <option ${"low"==e.priority?"selected":""} value="low">Low</option>\n                    <option ${"mid"==e.priority?"selected":""} value="mid">Mid</option>\n                    <option ${"high"==e.priority?"selected":""} value="high">High</option>\n                </select>\n                <input type="text" value="${e.project}" class="editProjectInput">\n                <input type="button" value="Save" class="saveEditBtn">\n                <input type="button" value="Cancel" class="cancelEditBtn">\n            </div>\n            `},closeEditTodo:c}})(),s=function(e){const t=e.target.classList[0];"addBookBtn"===t?f.addTodo():"closeTodoForm"===t&&u.closeNewTodoForm()},p=function(e){const t=e.target.classList[0];let n=e.target.parentNode.dataset.id;"deleteTodoBtn"===t?f.deleteTodo(n):"editTodoBtn"===t&&f.editTodo(n)},v=function(e){let t=e.target.parentNode.dataset.id;const n=e.target.classList[0];if("cancelEditBtn"===n)f.cancelEditTodo();else if("saveEditBtn"===n){const e=document.querySelector(".editTitleInput").value,n=document.querySelector(".editDescriptionInput").value,o=document.querySelector(".editDueDateInput").value,i=document.querySelector(".editPriorityInput").value,r=document.querySelector(".editProjectInput").value;f.saveEditTodo(t,e,n,o,i,r)}};function m(e,t,n,o,i){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.project=i}m.prototype.updateTodo=function(e,t,n,o,i){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.project=i};const f=(()=>{let e=[];const t=document.querySelector(".newBookBtn"),n=document.querySelector(".newTodoForm"),o=document.querySelector(".todos-container"),i=document.querySelector(".editTodoContainer"),r=document.querySelector("#title"),d=document.querySelector("#description"),c=document.querySelector("#duedate"),a=document.querySelector("#priority"),l=document.querySelector("#project"),f=document.querySelector(".navProjects"),T=document.querySelector(".navHome"),y=document.querySelector(".navToday"),h=document.querySelector(".navWeek");return t.addEventListener("click",u.openNewTodoForm),n.addEventListener("click",s),o.addEventListener("click",p),i.addEventListener("click",v),f.addEventListener("click",(function(){u.clearScreen(),u.loadProjectsPage(e)})),T.addEventListener("click",(function(){u.clearScreen(),u.loadHome(e)})),y.addEventListener("click",(function(){u.clearScreen(),u.loadToday(e)})),h.addEventListener("click",(function(){u.clearScreen(),u.loadWeek(e)})),function(){const t=new m("Titel1","Beschreibung 1","1999-08-04","Wichtig","Project1"),n=new m("Titel2","Beschreibung 1","1999-08-04","Wichtig1","Project2"),o=new m("Titel3eins","Beschreibung 1","2022-08-05","Wichtig2","Project3"),i=new m("Titel4eins","Beschreibunsg 1","1999-08-04","Wichtig2","Project1");e.push(t),e.push(n),e.push(o),e.push(i),u.loadHome(e)}(),{addTodo:function(){if(!r.value)return void alert("You have to fill in a title!");const t=new m(r.value,d.value,c.value,a.value,l.value);e.push(t),u.loadHome(e),u.closeNewTodoForm()},deleteTodo:function(t){e.splice(t,1),u.loadHome(e)},editTodo:function(t){u.openEditTodo(e[t],t)},cancelEditTodo:function(){u.closeEditTodo(),u.loadHome(e)},saveEditTodo:function(t,n,o,i,r,d){e[t].updateTodo(n,o,i,r,d),u.closeEditTodo(),u.loadHome(e)},closeTodoForm:function(){u.loadHome(e)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,